{"version":3,"sources":["components/person.js","components/addPerson.js","components/filter.js","services/personService.js","components/notification.js","constants/classes.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deletePerson","name","number","onClick","AddPerson","addPerson","changeName","changeNumber","newNumber","newName","onSubmit","value","onChange","type","Filter","search","changeSearch","baseUrl","axios","get","then","response","data","post","id","delete","status","put","Notification","message","styling","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","notification","setNotification","useEffect","personService","notify","style","setTimeout","find","newPerson","modifiedPerson","map","p","classes","catch","error","concat","e","target","preventDefault","includes","window","confirm","filter","toUpperCase","key","personToDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.aa658cd4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Person = ({person, deletePerson}) => {\r\n    return (\r\n        <p>{person.name} {person.number} <button onClick={deletePerson}>Delete</button></p>\r\n    );\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\n\r\nconst AddPerson = ({addPerson, changeName, \r\n    changeNumber, newNumber, newName}) => {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n              name: <input value={newName} onChange={changeName} />\r\n              <br/>\r\n              number: <input value={newNumber} onChange={changeNumber} />\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddPerson;","import React from 'react';\r\n\r\nconst Filter = ({search, changeSearch}) => {\r\n    return (\r\n        <label>filter:\r\n            <input value={search} onChange={changeSearch} />\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Filter;","import axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getPersons = () => {\r\n    return axios.get(baseUrl)\r\n            .then(response => response.data);\r\n}\r\n\r\nconst addPerson = (person) => {\r\n    return axios.post(baseUrl, person)\r\n            .then(response => response.data);\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n            .then(response => response.status);\r\n}\r\n\r\nconst updatePerson = (person) => {\r\n    return axios.put(`${baseUrl}/${person.id}`, person)\r\n            .then(response => response.data);\r\n}\r\n\r\nexport default { getPersons, addPerson, deletePerson, updatePerson: updatePerson }","import React from 'react';\r\nimport '../styles/styles.css';\r\n\r\nconst Notification = ({message, styling}) => {\r\n    return (\r\n        <div className={styling}>\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","const ERROR = 'error';\r\nconst SUCCESS = 'success';\r\n\r\nexport default {ERROR, SUCCESS};","import React, { useState, useEffect } from 'react';\nimport Person from './components/person';\nimport AddPerson from './components/addPerson';\nimport Filter from './components/filter';\nimport personService from './services/personService';\nimport Notification from './components/notification';\nimport classes from './constants/classes';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ search, setSearch ] = useState('');\n  const [ notification, setNotification ] = useState(null);\n  \n  useEffect(() => {\n    personService\n      .getPersons()\n      .then(persons => {\n        setPersons(persons);\n      });\n  }, []);\n\n  const notify = (message, style) => {\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n    setNotification({message: message, style: style});\n  }\n\n  const handleChangeName = (e) => {\n    setNewName(e.target.value);\n  }\n\n  const handleChangeNumber = (e) => {\n    setNewNumber(e.target.value);\n  }\n\n  const handleChangeSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const addOrUpdatePerson = (e) => {\n    e.preventDefault();\n    if (!persons.map(person => person.name).includes(newName)) {\n      addPerson();\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook. Replace old number?`)) {\n        changeNumber();\n      }\n    }\n  }\n\n  const changeNumber = () => {\n    const person = persons.find(person => person.name === newName)\n    const newPerson = {...person, number: newNumber};\n    personService\n      .updatePerson(newPerson)\n      .then(modifiedPerson => {\n        setPersons(persons.map(p => p.id !== modifiedPerson.id ? p : modifiedPerson));\n        notify('Number changed', classes.SUCCESS)\n      })\n      .catch(error => {\n        notify(error.response.data.error, classes.ERROR);\n      });\n      setNewName('');\n      setNewNumber('');\n  }\n\n  const addPerson = () => {\n    personService\n      .addPerson({name: newName, number: newNumber})\n      .then( person => {\n        setPersons(persons.concat(person))\n        notify('Added new person', classes.SUCCESS);\n      }).catch(error => {\n        notify(error.response.data.error, classes.ERROR);\n      });\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const deletePerson = (personToDelete) => {\n    if (window.confirm(`Delete ${personToDelete.name}?`)){\n      personService\n      .deletePerson(personToDelete.id)\n      .then(status => {\n        if (status === 204) {\n          setPersons(persons.filter(person => person.id !== personToDelete.id))\n          notify('Person deleted', classes.SUCCESS);\n        } else {\n          notify('Could not delete person', classes.ERROR);\n        }\n      });\n    } else return;\n  }\n\n  const getPersons = () => {\n    return (\n      persons.filter(person => person.name.toUpperCase().includes(search.toUpperCase()))\n      .map(person => <Person \n                        person={person} \n                        key={person.id}\n                        deletePerson={() => deletePerson(person) }\n                      />)\n    );\n  }\n\n  return (\n    <div>\n      { notification\n        ? <Notification message={notification.message} styling={notification.style} />\n        : null\n      }\n      <h2>Phonebook</h2>\n      <Filter search={search} changeSearch={handleChangeSearch} />\n      <h2>Add new</h2>\n      <AddPerson addPerson={addOrUpdatePerson} \n        changeName={handleChangeName} \n        changeNumber={handleChangeNumber}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      {getPersons()}\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}